/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.datastrct;

import static com.mycompany.datastrct.PlayerCard.sumbng;
import static com.mycompany.datastrct.PlayerCard.sumtmb;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;

import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.TimerTask;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerNumberModel;
//import javax.swing.Timer;
import java.util.Timer;

/**
 *
 * @author mehdiarat
 */
// Sortlama yapılacak kartlarda.
// overload ile matris girişi ve hocanın istediği randoma göre kart çekme
// bug temizliği
// slot için arrayi kaldır linkedlist kullan
//print ettiriken kayma yaşıyoruz collapse metoduna bak
public class GameWindow extends javax.swing.JFrame {

    private static int numPlayers;
    private Timer timer;
    private ArrayList<Integer> sayilar;
    private ArrayList<Integer> mannum;

    MultiLinkedList manualcard = new MultiLinkedList();
    MultiLinkedList kese = new MultiLinkedList();
    MultiLinkedList linkarr = new MultiLinkedList();
    MultiLinkedList link2arr = new MultiLinkedList();
    MultiLinkedList linkmanual = new MultiLinkedList();
    int count4 = 0;
    int count5 = 0;
    public static MultiLinkedList playerCards; // playerCards değişkenini GameWindow sınıfında tanımladık

    /**
     * Creates new form GameWindow
     */
    public GameWindow() {
        initComponents();
    }

    public GameWindow(int numPlayers) {
        this.numPlayers = numPlayers;
        initComponents();
        playerCards = generatePlayerCards(numPlayers);
        generatatable();
        generatatableman();
        generatekese();
        generateRandomNumbers();

        checkBingoAndUpdateCount(numPlayers);
        sayilar = new ArrayList<>();
        for (int i = 0; i < 90; i++) {
            sayilar.add(i);
        }
        mannum = new ArrayList<>();
        for (int i = 0; i < 90; i++) {
            mannum.add(i);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbl1 = new javax.swing.JLabel();
        jbl2 = new javax.swing.JLabel();
        jbl3 = new javax.swing.JLabel();
        jbl4 = new javax.swing.JLabel();
        jbl5 = new javax.swing.JLabel();
        jbl6 = new javax.swing.JLabel();
        jbl7 = new javax.swing.JLabel();
        jbl8 = new javax.swing.JLabel();
        jbl9 = new javax.swing.JLabel();
        jbl10 = new javax.swing.JLabel();
        jbl11 = new javax.swing.JLabel();
        jbl12 = new javax.swing.JLabel();
        jbl13 = new javax.swing.JLabel();
        jbl14 = new javax.swing.JLabel();
        jbl15 = new javax.swing.JLabel();
        jbl16 = new javax.swing.JLabel();
        jbl17 = new javax.swing.JLabel();
        jbl18 = new javax.swing.JLabel();
        jbl19 = new javax.swing.JLabel();
        jbl20 = new javax.swing.JLabel();
        jbl21 = new javax.swing.JLabel();
        jbl22 = new javax.swing.JLabel();
        jbl23 = new javax.swing.JLabel();
        jbl24 = new javax.swing.JLabel();
        jbl25 = new javax.swing.JLabel();
        jbl26 = new javax.swing.JLabel();
        jbl27 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        numberLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        for (int i = 0; i < numPlayers; i++) {
            jComboBox1.addItem(Integer.toString(i + 1));

        }
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Select ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(3, 9));

        jbl1.setText("jbl1");
        jPanel1.add(jbl1);

        jbl2.setText("jbl2");
        jPanel1.add(jbl2);

        jbl3.setText("jbl3");
        jPanel1.add(jbl3);

        jbl4.setText("jbl4");
        jPanel1.add(jbl4);

        jbl5.setText("jbl5");
        jPanel1.add(jbl5);

        jbl6.setText("jbl6");
        jPanel1.add(jbl6);

        jbl7.setText("jLabel7");
        jPanel1.add(jbl7);

        jbl8.setText("jbl8");
        jPanel1.add(jbl8);

        jbl9.setText("jbl9");
        jPanel1.add(jbl9);

        jbl10.setText("jbl10");
        jPanel1.add(jbl10);

        jbl11.setText("jbl11");
        jPanel1.add(jbl11);

        jbl12.setText("jbl12");
        jPanel1.add(jbl12);

        jbl13.setText("jbl13");
        jPanel1.add(jbl13);

        jbl14.setText("jbl14");
        jPanel1.add(jbl14);

        jbl15.setText("jbl15");
        jPanel1.add(jbl15);

        jbl16.setText("jbl16");
        jPanel1.add(jbl16);

        jbl17.setText("jbl17");
        jPanel1.add(jbl17);

        jbl18.setText("jbl18");
        jPanel1.add(jbl18);

        jbl19.setText("jbl19");
        jPanel1.add(jbl19);

        jbl20.setText("jbl20");
        jPanel1.add(jbl20);

        jbl21.setText("jbl21");
        jPanel1.add(jbl21);

        jbl22.setText("jbl22");
        jPanel1.add(jbl22);

        jbl23.setText("jbl23");
        jPanel1.add(jbl23);

        jbl24.setText("jbl24");
        jPanel1.add(jbl24);

        jbl25.setText("jbl25");
        jPanel1.add(jbl25);

        jbl26.setText("jbl26");
        jPanel1.add(jbl26);

        jbl27.setText("jbl27");
        jPanel1.add(jbl27);

        jSpinner1.setBounds(new java.awt.Rectangle(0, 0, 90, 1));

        jButton2.setText("STOP");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("START");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Selected Player's Bingo Count:");

        jLabel3.setText("jLabel3");

        jButton4.setText("EXIT");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText("Selected Player's Tombola Count:");

        jLabel5.setText("jLabel5");

        jButton5.setText("Details of Tombalas and Bingos");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        numberLabel.setText("Slot Label");

        startButton.setText("Run");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Collapse");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jButton6.setText("Manual Button");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Manual Number Button");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 828, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(jButton2))
                                    .addComponent(jButton3)
                                    .addComponent(jButton5)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(numberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stopButton)
                                    .addComponent(startButton)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton7))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(31, 31, 31)
                                            .addComponent(jLabel3))))))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton7))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addGap(33, 33, 33)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Object selectedItemObj = jComboBox1.getSelectedItem();
        if (selectedItemObj != null) { // Seçilen öğe null değilse devam et
            String selectedItem = selectedItemObj.toString(); // Seçilen öğeyi String olarak al
            try {

                int selectedPlayer = Integer.parseInt(selectedItem);
                showPlayerCards(selectedPlayer);
                /* if (count4 == 0 || count5 == 0) {
                    showPlayerCards(selectedPlayer);
                    JOptionPane.showMessageDialog(rootPane, "PLEASE SELECT OTHER PLAYER TO CREATE THE OTHER PLAYERS CARD TO START YOUR GAME WITHOUT ERROR");
                    if (selectedPlayer == 1) {
                        ++count4;
                    }

                    if (selectedPlayer == 2) {
                        ++count5;
                    }
                } else {
                    if (selectedPlayer == 1) {
                        JOptionPane.showMessageDialog(rootPane, "Player 1 turn.");
                        printarraytolabel(arr4);
                    }

                    if (selectedPlayer == 2) {
                        JOptionPane.showMessageDialog(rootPane, "Player 2 turn.");
                        printarraytolabel(arr5);
                    }
                }
                 */
// String'i Integer'a dönüştür
                // Oyuncunun kartlarını göster
            } catch (NumberFormatException e) {
                // Seçilen öğe Integer'a dönüştürülemediği için hata oluştu
                // Bu durumda bir hata mesajı gösterebilir veya uygun bir işlem yapabilirsiniz
                System.err.println("Hata: Seçilen öğe bir sayıya dönüştürülemedi!");
            }
        } else {
            // Seçilen öğe null ise bir işlem yapma veya hata mesajı gösterme
            System.err.println("Hata: Bir öğe seçilmedi!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //  startSpinner();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Object selectedItemObj = jComboBox1.getSelectedItem();
        String selectedItem = selectedItemObj.toString(); // Seçilen öğeyi String olarak al

        int selectedPlayer = Integer.parseInt(selectedItem); // String'i Integer'a dönüştür

        //stopSpinner4(selectedPlayer);
        checkBingoAndUpdateCount(selectedPlayer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        dispose();
        TombolaGameGUI tm = new TombolaGameGUI();
        tm.setVisible(true);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        PlayerCard pl = new PlayerCard(numPlayers);
        pl.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        start();

    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        Object selectedItemObj = jComboBox1.getSelectedItem();
        String selectedItem = selectedItemObj.toString(); // Seçilen öğeyi String olarak al

        int selectedPlayer = Integer.parseInt(selectedItem);
        stop(selectedPlayer);
        checkBingoAndUpdateCount(selectedPlayer);

    }//GEN-LAST:event_stopButtonActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int[][] card1 = {
            {5, -1, 22, -1, 45, -1, 60, 73, -1},
            {-1, 10, -1, 31, 47, 58, 68, -1, -1},
            {-1, 17, 26, 38, -1, -1, -1, 79, 86}
        };
        matrixprinttolinkedlist(card1);
        showmatrixcard();

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
     
      checktombforman();
      checkbng();

    }//GEN-LAST:event_jButton7ActionPerformed

    /*private void showPlayerCards(int playerIndex) {
    MultiLinkedList currentList = playerCards;
    for (int i = 1; i <= playerIndex; i++) {
        if (currentList == null) {
            System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı.");
            return;
        }
        currentList = currentList.next;
    }

    if (currentList == null) {
        System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı.");
        return;
    }

    NodeClass row = currentList.head.down;  // İlk satıra git
    int labelIndex = 1;

    while (row != null) {
        NodeClass col = row.next;  // İlk sütuna git
        while (col != null) {
            JLabel label = findLabelByIndex(labelIndex++);
            if (label != null) {
                if (col.data == -1) {
                    label.setText("X");
                    label.setForeground(Color.BLACK);
                    label.setBackground(Color.WHITE);
                } else if (col.data == -2) {
                    label.setText("T");
                    label.setForeground(Color.RED);
                } else {
                    label.setText(Integer.toString(col.data));
                    label.setForeground(Color.BLACK);
                    label.setBackground(Color.WHITE);
                }
            } else {
                System.out.println("Hata: Belirtilen indekse sahip bir JLabel bulunamadı.");
            }
            col = col.next;  // Bir sonraki sütuna git
        }
        row = row.down;  // Bir sonraki satıra git
    }
}*/
 /*private void showPlayerCards2(int playerIndex) {
        MultiLinkedList currentList = playerCards;
        for (int i = 1; i <= playerIndex; i++) {
            if (currentList == null) {
                System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı.");
                return;
            }
            currentList = currentList.next;
        }

        if (currentList == null) {
            System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı.");
            return;
        }

        NodeClass current = currentList.head;
        int row = 0;

        while (current != null) {
            NodeClass temp = current;
            while (temp != null) {
                int index = 1;
                JLabel label = findLabelByIndex(index++); // 3x9'luk ızgarada hangi indekste olduğumuzu hesapla
                if (label != null) {
                    if (temp.data == -1) {
                        label.setText("X");
                        label.setForeground(Color.BLACK);
                        label.setBackground(Color.WHITE); // Arka plan rengi beyaz
                    } else if (temp.data == -2) {
                        label.setText("T");
                        label.setForeground(Color.RED); // Kırmızı renk
                    } else {
                        label.setText(Integer.toString(temp.data));
                        label.setForeground(Color.BLACK);
                        label.setBackground(Color.WHITE);
                    }
                } else {
                    //System.out.println("Hata: Belirtilen indekse sahip bir JLabel bulunamadı.");
                }
                temp = temp.down; // Aşağıya doğru olan bağlantıyı takip et
            }
            row++;
            current = current.next; // Sağa doğru olan bağlantıyı takip et
        }
    }*/
    private void showPlayerCards(int playerIndex) {
        /*   JFrame playerFrame = new JFrame();
        playerFrame.setTitle("Player " + playerIndex + "'s Cards");
        playerFrame.setSize(300, 200);
        playerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        MultiLinkedList currentList = playerCards;
        for (int i = 1; i <= playerIndex; i++) {
            if (currentList == null) {
                // Belirtilen oyuncu numarasına sahip bir kart listesi yoksa hata mesajı yazdır ve geri dön
                System.out.println("Player " + playerIndex + " does not exist.");
                return;
            }
            currentList = currentList.next; // Bir sonraki oyuncunun kart listesine geç
        }

        if (currentList == null) {
            // Belirtilen oyuncu numarasına sahip bir kart listesi yoksa hata mesajı yazdır ve geri dön
            System.out.println("Player " + playerIndex + " does not exist.");
            return;
        }

        // Belirtilen oyuncu numarasına sahip kart listesini bulduk
        // Bu listenin içeriğini yazdır
        currentList.printList(playerFrame);
        
         
 PlayerCard pla = new PlayerCard(playerIndex);
        pla.setVisible(true);*/

        clearAllLabels();
        MultiLinkedList currentList = playerCards;
        for (int i = 1; i <= playerIndex; i++) {
            if (currentList == null) {
                System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı.");
                return;
            }
            currentList = currentList.next;
        }

        if (currentList == null) {
            System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı.");
            return;
        }

        NodeClass current = currentList.head;
        int index = 0;
        //markaRandom();
        showXcard(playerIndex);

        while (current != null) {

            JLabel label = findLabelByIndex(++index);

            if (!"X".equals(label.getText())) {
                /*if (current.data == -1) {
                    label.setText("X");
                    label.setForeground(Color.BLACK);
                    label.setBackground(Color.WHITE); // Arka plan rengi beyaz

                } else*/ if (current.data == -2) {
                    label.setText("T");
                    label.setForeground(Color.RED); // Kırmızı renk

                } else {
                    label.setText(Integer.toString(current.data));
                    label.setForeground(Color.BLACK);
                    label.setBackground(Color.WHITE);
                }
                current = current.next;

            } else {
                System.out.println("Blok var bir sonraki label kontrolü sağlanıp ekleme yapılacak.");

            }

            /// Tekrardan findlabelyaptırt ve if bloğu açtır iki adet arraye indexlerine göre elemanlarını eklesin akabinde biz bunu yazdırıcaz.Ya da multidimensional arraylist yaptırt kullanıcı sayısı arttıkça grupları artırsın. Selecte bastığımızda ise o arrayin elemanlarını istenilene göre yazdırsın.
            /// Check bingo metodunda arraye ekleme yaptırt eğer array[i] gelen dataya eşitse onu T yap
            /// Selecte iki tane index adlı değişken yaptır eğer 1 seçildiyse 1 kere veya 2 seçildiyse 1 kere direk printi çalıştırsın
        }

        /* 
    int ch= 0;
    while(current!= null){
        if(current.data==-1 ){
            ch++;
            current =current.down;
        } else{
            current = current.down;
            
        }
        
    }
    
    if(ch % 9== 0){
        if(ch !=0){
            JOptionPane.showMessageDialog(null, "Bingoo!", "Great!", JOptionPane.INFORMATION_MESSAGE); 
                 currentList.bingocn ++;
        }
                 

    }
    jLabel3.setText(String.valueOf(currentList.bingocn));*/
    }

    private void clearAllLabels() {
        for (int i = 1; i <= 27; i++) {
            JLabel label = findLabelByIndex(i);
            if (label != null) {
                label.setText("");
            }
        }
    }

    /*private void showPlayerCards3(int playerIndex) {
        MultiLinkedList currentList = playerCards;
        int currentIndex = 1; // Initialize index counter

        while (currentList != null && currentIndex <= playerIndex) {
            if (currentIndex == playerIndex) { // Check if the current index matches the selected player index
                NodeClass current = currentList.head;
                int labelIndex = 1;

                while (current != null && labelIndex <= 27) { // Iterate over JLabels
                    JLabel label = findLabelByIndex(labelIndex);

                    if (label != null && !"X".equals(label.getText())) {
                        if (current.data == -2) {
                            label.setText("T");
                            label.setForeground(Color.RED); // Set text and color for 'T' cards
                        } else {
                            label.setText(Integer.toString(current.data)); // Set text for other cards
                            label.setForeground(Color.BLACK);
                            label.setBackground(Color.WHITE);
                        }
                        current = current.next; // Move to the next node
                    } else {
                        System.out.println("Hata: Belirtilen indekse sahip bir JLabel bulunamadı veya blok var.");
                    }
                    labelIndex++; // Increment label index
                }
                return; // Exit the method once the player cards are displayed
            }
            currentList = currentList.next; // Move to the next player
            currentIndex++; // Increment current index
        }

        System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı."); // Player index not found
    }*/

 /* private JLabel findEmptyLabel() {
        for (int i = 1; i <= 27; i++) {
            JLabel label = findLabelByIndex(i);
            if (label != null && label.getText() != null && label.getText().isEmpty()) {
                return label;
            }
        }
        return null;

    }*/

 /*private void startSpinner() {
        timer = new Timer(100, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                jSpinner1.setValue((int) (Math.random() * 91)); // Rasgele sayı
            }
        });
        timer.start();
    }*/

 /* private void stopSpinner() {
        if (timer != null) {
            timer.stop();
            int value = (int) jSpinner1.getValue();
            System.out.println("Stopped at: " + value);
            // Spinner'dan seçilen sayıyı kaldır
            SpinnerListModel model = (SpinnerListModel) jSpinner1.getModel();
            java.util.List<Integer> list = new java.util.ArrayList<Integer>();
            for (int i = 0; i <= 90; i++) {
                if (i != value) {
                    list.add(i);
                }
            }
            model = new SpinnerListModel(list);
            jSpinner1.setModel(model);
        }
    }*/

 /*private void stopSpinner2() {
        if (timer != null) {
            timer.stop();
            int value = (int) jSpinner1.getValue();
            System.out.println("Stopped at: " + value);

            SpinnerNumberModel model = (SpinnerNumberModel) jSpinner1.getModel();
            Comparable min = model.getMinimum();
            Comparable max = model.getMaximum();
            List<Integer> list = new ArrayList<>();

            // You need to iterate through values of Comparable type.
            // Since we're dealing with integers, it's safe to assume Comparable is Integer.
            for (Comparable i = min; i.compareTo(max) <= 0; i = (Integer) i + 1) {
                if (i.compareTo(value) != 0) { // compareTo() compares the values
                    list.add((Integer) i);
                }
            }

            model = new SpinnerNumberModel(value, min, max, 1);
            jSpinner1.setModel(model);
        }
    }*/

 /* private void stopSpinner3() {
        if (timer != null) {
            timer.stop();
            int value = (int) jSpinner1.getValue();
            System.out.println("Stopped at: " + value);

            SpinnerNumberModel model = (SpinnerNumberModel) jSpinner1.getModel();
            Comparable min = model.getMinimum();
            Comparable max = model.getMaximum();
            List<Integer> list = new ArrayList<>();

            if (min != null) { // Check if min is not null
                // You need to iterate through values of Comparable type.
                // Since we're dealing with integers, it's safe to assume Comparable is Integer.
                for (Comparable i = min; i.compareTo(max) <= 0; i = (Integer) i + 1) {
                    if (i.compareTo(value) != 0) { // compareTo() compares the values
                        list.add((Integer) i);
                    }
                }
            }

            model = new SpinnerNumberModel(value, min, max, 1);
            jSpinner1.setModel(model);
        }
    }*/
    public void checkBingoAndUpdateCount(int playerIndex) {

        MultiLinkedList currentList = playerCards;
        for (int i = 1; i <= playerIndex; i++) {
            if (currentList == null) {
                System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı.");
                return;
            }
            currentList = currentList.next;
        }

        NodeClass current = currentList.head;
        // 9x3 kart oluşturma
        int cinko = 0;
        int sumtomb = 0;
        for (int row = 0; row < 3; row++) {
            int tombala = 0;
            for (int col = 0; col < 5; col++) {
                if (current.data == -2) {
                    tombala++;
                    sumtomb++;
                    current = current.next;
                } else {
                    current = current.next;
                }

            }
            if (tombala > 4) {
                cinko++;
            }

        }

        jLabel3.setText(String.valueOf(cinko));
        jLabel5.setText(String.valueOf(sumtomb));
        boolean found = false;
        int index = 0;
        while (index < sumbng.size()) {
            String element = String.valueOf(sumbng.getElementAt(index));
            if (element.startsWith("Player" + playerIndex)) {
                found = true;
                break;
            }
            index++;
        }

        // Eğer varsa değeri güncelle, yoksa yeni bir öğe ekle
        if (found) {
            sumbng.set(index, "Player" + playerIndex + ", Bingo Count =" + cinko);
        } else {
            sumbng.addElement("Player" + playerIndex + ", Bingo Count =" + cinko);
        }

        /*NodeClass current = playerCards.head;
        int ch = 0; // Çinko sayısını tutmak için sayaç
        while (current != null) {
            if (current.data == -1) {
                ch++; // -1 olduğunda çinko sayısını artır
            }
            current = current.down;
        }

        // Çinko sayısını kontrol et
        if (ch % 9 == 0) { // Her satırda 9 hücre olduğunu varsayıyorum
            if (ch != 0) {
                JOptionPane.showMessageDialog(null, "Bingoo!", "Great!", JOptionPane.INFORMATION_MESSAGE);
                playerCards.bingocn++; // Çinko sayısını artır

            }
        }*/
    }

    private JLabel findLabelByIndex(int index) {
        return switch (index) {
            case 1 ->
                jbl1;
            case 2 ->
                jbl2;
            case 3 ->
                jbl3;
            case 4 ->
                jbl4;
            case 5 ->
                jbl5;
            case 6 ->
                jbl6;
            case 7 ->
                jbl7;
            case 8 ->
                jbl8;
            case 9 ->
                jbl9;
            case 10 ->
                jbl10;
            case 11 ->
                jbl11;
            case 12 ->
                jbl12;
            case 13 ->
                jbl13;
            case 14 ->
                jbl14;
            case 15 ->
                jbl15;
            case 16 ->
                jbl16;
            case 17 ->
                jbl17;
            case 18 ->
                jbl18;
            case 19 ->
                jbl19;
            case 20 ->
                jbl20;
            case 21 ->
                jbl21;
            case 22 ->
                jbl22;
            case 23 ->
                jbl23;
            case 24 ->
                jbl24;
            case 25 ->
                jbl25;
            case 26 ->
                jbl26;
            case 27 ->
                jbl27;
            default ->
                null;
        };
    }

    /*public void markRandomLabels() {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < 27; i++) {
            indices.add(i+1);
        }
        Collections.shuffle(indices);

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 4; j++) {
                JLabel label = findLabelByIndex(indices.get(i * 3 + j));
                if (label != null) {
                    label.setText("X");
                }
            }
        }
    }*/
    public void markRandomLabels() {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < 27; i++) {
            indices.add(i + 1); // Indeksleri 1'den 27'ye kadar ekle
        }
        Collections.shuffle(indices);

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 4; j++) {
                int index = 0;
                if (index < indices.size()) {
                    JLabel label = findLabelByIndex(indices.get(index)); // Doğru indeksi bulmak için i * 4 + j kullan
                    if (label != null) {
                        label.setText("X");
                    }
                }
            }
        }
    }

    private void markaRandom(List<JLabel> labels) {
        Random random = new Random();

        List<JLabel> copyLabels = new ArrayList<>(labels); // Orijinal listeyi kopyala

        for (int i = 0; i < 4; i++) {
            int randomIndex = random.nextInt(copyLabels.size());
            JLabel label = copyLabels.get(randomIndex);
            label.setText("X");
            copyLabels.remove(randomIndex); // Kopya listeyi güncelle, orijinaline dokunma
        }
    }

    public void markRandomLabelsInGroups() {
        List<List<JLabel>> groups = new ArrayList<>();
        for (int i = 1; i <= 27; i += 9) {
            List<JLabel> group = new ArrayList<>();
            for (int j = i; j < i + 9; j++) {
                group.add(findLabelByIndex(j));
            }
            groups.add(group);
        }

        for (List<JLabel> group : groups) {
            markaRandom(group);
        }

        // Grupları sıfırla
        groups.clear();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameWindow().setVisible(true);
            }
        });

    }

    private MultiLinkedList generatePlayerCards(int numPlayers) {
        MultiLinkedList firstPlayer = new MultiLinkedList();
        MultiLinkedList currentPlayer = firstPlayer;
        Random random = new Random();

        for (int i = 0; i < numPlayers; i++) {
            MultiLinkedList card = new MultiLinkedList();

            // 9x3 kart oluşturma
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 5; col++) {
                    int startNumber = col * 10 + 1; // Sütun başlangıç numarası
                    int randomNumber;
                    //int randomNumber = random.nextInt(90) + 1;
                    do {
                        randomNumber = startNumber + random.nextInt(9);
                    } while (card.contains(randomNumber));

                    card.add(randomNumber);
                }
            }

            // Her satırda 4 düğümü -1 olarak işaretle
            /* for (int row = 0; row < 3; row++) {
                Set<Integer> markedIndexes = new HashSet<>();
                NodeClass current = card.head;
                int numX = 4;
                while (numX > 0) {
                    int randomIndex = random.nextInt(9);
                    if (!markedIndexes.contains(randomIndex)) {
                        markedIndexes.add(randomIndex);
                        NodeClass temp = current;
                        for (int k = 0; k < randomIndex + (row * 9); k++) {
                            temp = temp.next;
                        }
                        temp.data = -1;
                        numX--;
                    }
                }
            }*/
            // Bağlantıları ayarla
            currentPlayer.next = card;
            currentPlayer = card;
        }

        return firstPlayer;
    }

    /*private MultiLinkedList generatePlayerCards(int numPlayers) {
        MultiLinkedList firstPlayerCard = null;
        MultiLinkedList currentPlayerCard = null;
        Random random = new Random();

        for (int i = 0; i < numPlayers; i++) {
            MultiLinkedList card = new MultiLinkedList();

            // 9x3 kartı rastgele sayılarla doldurma
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 9; col++) {
                    int randomNumber = random.nextInt(90) + 1;
                    card.add(row, col, randomNumber);
                }
            }

            // Her satırda rastgele 4 hücreyi işaretle
            for (int row = 0; row < 3; row++) {
                Set<Integer> markedIndexes = new HashSet<>();
                while (markedIndexes.size() < 4) {
                    int randomIndex = random.nextInt(9);
                    if (!markedIndexes.contains(randomIndex)) {
                        markedIndexes.add(randomIndex);
                        card.add(row, randomIndex, -1);
                    }
                }
            }

            // Bağlantıları ayarla
            if (i == 0) {
                firstPlayerCard = card;
            } else {
                currentPlayerCard.next = card;
            }
            currentPlayerCard = card;
        }

        return firstPlayerCard;
    }
     */
    private void start() {
        stopButton.setEnabled(true);
        timer = new Timer();
        timer.schedule(new TimerTask() {
            Random rand = new Random();

            @Override
            public void run() {
                int index = rand.nextInt(sayilar.size());
                numberLabel.setText(Integer.toString(sayilar.get(index)));
            }
        }, 0, 100); // 100ms aralıklarla sayı değiştir
    }

    private void stop(int playerIndex) {
        if (timer != null) {
            timer.cancel();
            timer = null;
            int value = Integer.parseInt(numberLabel.getText());

            System.out.println("Stopped at: " + value);

            sayilar.remove(Integer.valueOf(value));
            numberLabel.setText("");

            stopButton.setEnabled(false);

            JOptionPane.showMessageDialog(this, "Çekilen sayı " + value + " " + "Kesedeki toplam eleman sayısı=" + sayilar.size(), "Information", JOptionPane.WARNING_MESSAGE);

            MultiLinkedList currentList = playerCards;
            for (int i = 1; i <= playerIndex; i++) {
                if (currentList == null) {
                    System.out.println("Hata: Oyuncu " + playerIndex + " bulunamadı.");
                    return;
                }
                currentList = currentList.next;
            }

            NodeClass current = currentList.head;
            int index = 1;
            while (current != null) {
                if (current.data == value) {
                    JOptionPane.showMessageDialog(null, "TOMBOLA!", "Great!", JOptionPane.INFORMATION_MESSAGE);
                    sumtmb.addElement("Player " + playerIndex + ", Tombola Number =" + value);
                    // JLabel label = findLabelByIndex(index);

                    /*while ("X".equals(label.getText())) {
                        index++;
                        label = findLabelByIndex(index);
                        // Bir sonraki label'i al //Burada hata buraya bak
                    }

                    label.setText("T");
                    label.setForeground(Color.red);
                    current.data = -2;*/
                    if (playerIndex == 1) {
                        for (int l = 0; l < 27; l++) {
                            JLabel label = findLabelByIndex(l + 1);
                            try {

                                int labelval = Integer.parseInt(label.getText());
                                // intValue artık dönüştürülmüş tamsayı değerini içeriyor
                                // intValue ile istediğiniz işlemleri gerçekleştirebilirsiniz

                                if (labelval == value) {

                                    label.setText("T");
                                    label.setForeground(Color.red);
                                    current.data = -2;

                                }

                            } catch (NumberFormatException e) {
                                // Eğer dönüştürme başarısız olursa, buraya düşer
                                // Uygun bir işlem yapabilirsiniz, örneğin hata mesajı gösterebilirsiniz
                                System.out.println("Dönüştürme hatası: " + e.getMessage());
                                continue;
                            }

                        }
                    }

                    if (playerIndex == 2) {
                        for (int z = 0; z < 27; z++) {
                            JLabel label = findLabelByIndex(z + 1);
                            try {

                                int labelval = Integer.parseInt(label.getText());
                                // intValue artık dönüştürülmüş tamsayı değerini içeriyor
                                // intValue ile istediğiniz işlemleri gerçekleştirebilirsiniz

                                if (labelval == value) {

                                    label.setText("T");
                                    label.setForeground(Color.red);
                                    current.data = -2;

                                }

                            } catch (NumberFormatException e) {
                                // Eğer dönüştürme başarısız olursa, buraya düşer
                                // Uygun bir işlem yapabilirsiniz, örneğin hata mesajı gösterebilirsiniz
                                System.out.println("Dönüştürme hatası: " + e.getMessage());
                                continue;
                            }

                        }
                    }

                } else {
                    current = current.next;
                    ++index;
                }
            }

        }
    }
    /*
    private MultiLinkedList generatePlayerCards(int numPlayers) {
    MultiLinkedList firstPlayer = new MultiLinkedList();
    MultiLinkedList currentPlayer = firstPlayer;
    Random random = new Random();

    for (int i = 0; i < numPlayers; i++) {
        MultiLinkedList card = new MultiLinkedList();

        // 9x3 kart oluşturma
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 9; col++) {
                int randomNumber = random.nextInt(90) + 1;
                card.add(randomNumber);
            }
        }

        // Rastgele olarak 5 düğümü -1 olarak işaretle
        int numX = 5;
        Set<Integer> markedIndexes = new HashSet<>();
        NodeClass current = card.head;
        while (numX > 0) {
            int randomIndex = random.nextInt(27);
            if (!markedIndexes.contains(randomIndex)) {
                markedIndexes.add(randomIndex);
                NodeClass temp = current;
                for (int k = 0; k < randomIndex; k++) {
                    temp = temp.down;
                }
                temp.data = -1;
                numX--;
            }
        }

        // Bağlantıları ayarla
        currentPlayer.next = card;
        currentPlayer = card;
    }

    return firstPlayer;
}

     */
 /*  private MultiLinkedList generatePlayerCards(int numPlayers) {
    MultiLinkedList firstPlayer = new MultiLinkedList();
    MultiLinkedList currentPlayer = firstPlayer;
    Random random = new Random();

    for (int i = 0; i < numPlayers; i++) {
        MultiLinkedList card = new MultiLinkedList();
        for (int j = 0; j < 15; j++) {
            int randomNumber = random.nextInt(90) + 1;
            card.add(randomNumber);
        }

        // Rastgele olarak 5 düğümü -1 olarak işaretle
        int numX = 5;
        NodeClass current = card.head;
        Set<Integer> markedIndexes = new HashSet<>();
        while (numX > 0) {
            int randomIndex = random.nextInt(15);
            if (!markedIndexes.contains(randomIndex)) {
                markedIndexes.add(randomIndex);
                NodeClass temp = current;
                for (int k = 0; k < randomIndex; k++) {
                    temp = temp.down;
                }
                temp.data = -1;
                numX--;
            }
        }

        // Bağlantıları ayarla
        currentPlayer.next = card;
        currentPlayer = card;
    }

    return firstPlayer;
}
     */
 /*
    private MultiLinkedList generatePlayerCards(int numPlayers) {
    MultiLinkedList firstPlayer = new MultiLinkedList();
    MultiLinkedList currentPlayer = firstPlayer;
    Random random = new Random();

    for (int i = 0; i < numPlayers; i++) {
        MultiLinkedList card = new MultiLinkedList();
        for (int j = 0; j < 15; j++) {
            int randomNumber = random.nextInt(90) + 1;
            card.add(randomNumber);
        }

        // Randomly mark 5 nodes as X (-1)
        int numX = 5;
        NodeClass current = card.head;
        while (numX > 0 && current != null) {
            if (current.data != -1) {
                current.data = -1;
                numX--;
            }
            current = current.down;
        }

        // Bağlantıları ayarla
        currentPlayer.next = card;
        currentPlayer = card;
    }

    return firstPlayer;
}
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel jbl1;
    private javax.swing.JLabel jbl10;
    private javax.swing.JLabel jbl11;
    private javax.swing.JLabel jbl12;
    private javax.swing.JLabel jbl13;
    private javax.swing.JLabel jbl14;
    private javax.swing.JLabel jbl15;
    private javax.swing.JLabel jbl16;
    private javax.swing.JLabel jbl17;
    private javax.swing.JLabel jbl18;
    private javax.swing.JLabel jbl19;
    private javax.swing.JLabel jbl2;
    private javax.swing.JLabel jbl20;
    private javax.swing.JLabel jbl21;
    private javax.swing.JLabel jbl22;
    private javax.swing.JLabel jbl23;
    private javax.swing.JLabel jbl24;
    private javax.swing.JLabel jbl25;
    private javax.swing.JLabel jbl26;
    private javax.swing.JLabel jbl27;
    private javax.swing.JLabel jbl3;
    private javax.swing.JLabel jbl4;
    private javax.swing.JLabel jbl5;
    private javax.swing.JLabel jbl6;
    private javax.swing.JLabel jbl7;
    private javax.swing.JLabel jbl8;
    private javax.swing.JLabel jbl9;
    private javax.swing.JLabel numberLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

    private void printarraytolabel(String[] arr) {
        int index = 1;
        JLabel label = findLabelByIndex(index);
        for (int r = 0; r < 27; r++) {

            label = findLabelByIndex(r + 1);
            if (arr[r] == "-2") {
                label.setText("T");
            } else if (arr[r] == "-1") {
                label.setText("X");

            } else {
                label.setText(arr[r]);

            }

        }
    }

    private void generatatable() {
        int index = 1;
        int count = 0;
        if (index == 1) {
            clearAllLabels();
            markRandomLabelsInGroups();

            for (int i = 1; i <= 27; i++) {
                JLabel label = findLabelByIndex(i);
                if ("X".equals(label.getText())) {
                    // lblarr'in sınırlarını kontrol et
                    linkarr.addlbl(label);
                    count++;

                }
            }
            ++index;
            count = 0;
        }

        if (index == 2) {
            clearAllLabels();
            markRandomLabelsInGroups();
            for (int i = 1; i <= 27; i++) {
                JLabel label = findLabelByIndex(i);
                if ("X".equals(label.getText())) {
                    // lblarr'in sınırlarını kontrol et
                    link2arr.addlbl(label);
                    count++;

                }
            }
            ++index;
            count = 0;
        }

    }

    /*public void showX1card(int parameter) {
        switch (parameter) {
            case 1 -> {
                for (JLabel label : lblarr) {
                    label.setText("X");
                }
            }
            case 2 -> {
                for (JLabel label : lbl2arr) {
                    label.setText("X");
                }
            }
            default -> System.out.println("Geçersiz parametre! Sadece 1 veya 2 giriniz.");
        }
}*/
    public void showXcard(int parameter) {
        NodeClass current = linkarr.head;
        NodeClass current2 = link2arr.head;
        switch (parameter) {
            case 1 -> {
                while (current != null) {
                    for (int i = 1; i <= 27; i++) {
                        JLabel label = findLabelByIndex(i);
                        if (current.labe == label) {
                            label.setText("X");
                        }
                    }
                    current = current.next;
                }

            }
            case 2 -> {
                while (current2 != null) {
                    for (int i = 1; i <= 27; i++) {
                        JLabel label = findLabelByIndex(i);
                        if (current2.labe == label) {
                            label.setText("X");
                        }
                    }
                    current2 = current2.next;
                }

            }
            default ->
                System.out.println("Geçersiz parametre! Sadece 1 veya 2 giriniz.");
        }
    }

    public void generatekese() {
        Random random = new Random();
        NodeClass current = kese.head;

        while (current != null) {
            int randomNumber = random.nextInt(91); // 0 dahil, 90 hariç rastgele sayı üretir
            kese.add(randomNumber);

          
                
           

            current = current.next;
        }

    }

    
    public void generateRandomNumbers() {
         mannum = new ArrayList<>();
        Random random = new Random();

        while (mannum.size() < 90) {
            int randomNumber = random.nextInt(91); // 0 ile 90 arasında rastgele sayı üret
            if (!mannum.contains(randomNumber)) { // Sayı daha önce eklenmediyse
                mannum.add(randomNumber);
            }
        }
    }
    
    
 public int takenumberfromkese() {
    NodeClass current = kese.head;
    int selectedNumber = 0;

    while (current != null) {
        int num = current.data;
        JOptionPane.showMessageDialog(rootPane, "You selected " + num);
        selectedNumber = num; // Seçilen numarayı saklayalım
        current = current.next; // Düğümü ilerlet
    }
    
    JOptionPane.showMessageDialog(rootPane, "You selected " + selectedNumber);
    
    return selectedNumber;
}
 
 
  public int pullRandomNumber() {
        if (!mannum.isEmpty()) {
            Random random = new Random();
            int randomIndex = random.nextInt(mannum.size()); // mannum listesinden rastgele bir sayı seç
            int randomNumber = mannum.get(randomIndex); 
            JOptionPane.showMessageDialog(rootPane, "You selected " +""+ randomNumber); // Seçilen sayıyı al
            mannum.remove(randomIndex); // Seçilen sayıyı listeden sil
            return randomNumber; // Seçilen sayıyı döndür
             
        } else {
            // Eğer mannum listesi boşsa -1 döndürülebilir veya isteğe bağlı olarak bir hata veya istisna fırlatılabilir
            throw new IllegalStateException("Listede çekilecek bir sayı bulunmuyor.");
        }
    }


    public void checktombforman() {

        NodeClass current = manualcard.head;
        int playerIndex = 3;
        int index = 3;
        int value = pullRandomNumber();
        while (current != null) {
                if (current.data == value) {
                    JOptionPane.showMessageDialog(null, "TOMBOLA!", "Great!", JOptionPane.INFORMATION_MESSAGE);
                    sumtmb.addElement("Player " + playerIndex + ", Tombola Number =" + value);
                    // JLabel label = findLabelByIndex(index);

                    /*while ("X".equals(label.getText())) {
                        index++;
                        label = findLabelByIndex(index);
                        // Bir sonraki label'i al //Burada hata buraya bak
                    }

                    label.setText("T");
                    label.setForeground(Color.red);
                    current.data = -2;*/
                    if (playerIndex == 1) {
                        for (int l = 0; l < 27; l++) {
                            JLabel label = findLabelByIndex(l + 1);
                            try {

                                int labelval = Integer.parseInt(label.getText());
                                // intValue artık dönüştürülmüş tamsayı değerini içeriyor
                                // intValue ile istediğiniz işlemleri gerçekleştirebilirsiniz

                                if (labelval == value) {

                                    label.setText("T");
                                    label.setForeground(Color.red);
                                    current.data = -2;

                                }

                            } catch (NumberFormatException e) {
                                // Eğer dönüştürme başarısız olursa, buraya düşer
                                // Uygun bir işlem yapabilirsiniz, örneğin hata mesajı gösterebilirsiniz
                                System.out.println("Dönüştürme hatası: " + e.getMessage());
                                continue;
                            }

                        }
                    }

                    if (playerIndex == 3) {
                        for (int z = 0; z < 27; z++) {
                            JLabel label = findLabelByIndex(z + 1);
                            try {

                                int labelval = Integer.parseInt(label.getText());
                                // intValue artık dönüştürülmüş tamsayı değerini içeriyor
                                // intValue ile istediğiniz işlemleri gerçekleştirebilirsiniz

                                if (labelval == value) {

                                    label.setText("T");
                                    label.setForeground(Color.red);
                                    current.data = -2;

                                }

                            } catch (NumberFormatException e) {
                                // Eğer dönüştürme başarısız olursa, buraya düşer
                                // Uygun bir işlem yapabilirsiniz, örneğin hata mesajı gösterebilirsiniz
                                System.out.println("Dönüştürme hatası: " + e.getMessage());
                                continue;
                            }

                        }
                    }

                } else {
                    current = current.next;
                    ++index;
                }
            }
    }

    public void matrixprinttolinkedlist(int arr[][]) {

        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] == -1) {
                    continue;

                } else {
                    manualcard.add(j);

                }

            }
        }

    }

    public void showmatrixcard() {
        clearAllLabels();

        NodeClass current = manualcard.head;

        int index = 0;
        //markaRandom();
        showXmancard();

        while (current != null) {

            JLabel label = findLabelByIndex(++index);

            if (!"X".equals(label.getText())) {
                /*if (current.data == -1) {
                    label.setText("X");
                    label.setForeground(Color.BLACK);
                    label.setBackground(Color.WHITE); // Arka plan rengi beyaz

                } else*/ if (current.data == -2) {
                    label.setText("T");
                    label.setForeground(Color.RED); // Kırmızı renk

                } else {
                    label.setText(Integer.toString(current.data));
                    label.setForeground(Color.BLACK);
                    label.setBackground(Color.WHITE);
                }
                current = current.next;

            } else {
                System.out.println("Blok var bir sonraki label kontrolü sağlanıp ekleme yapılacak.");

            }

            /// Tekrardan findlabelyaptırt ve if bloğu açtır iki adet arraye indexlerine göre elemanlarını eklesin akabinde biz bunu yazdırıcaz.Ya da multidimensional arraylist yaptırt kullanıcı sayısı arttıkça grupları artırsın. Selecte bastığımızda ise o arrayin elemanlarını istenilene göre yazdırsın.
            /// Check bingo metodunda arraye ekleme yaptırt eğer array[i] gelen dataya eşitse onu T yap
            /// Selecte iki tane index adlı değişken yaptır eğer 1 seçildiyse 1 kere veya 2 seçildiyse 1 kere direk printi çalıştırsın
        }

    }

    private void generatatableman() {

        clearAllLabels();
        markRandomLabelsInGroups();

        for (int i = 1; i <= 27; i++) {
            JLabel label = findLabelByIndex(i);
            if ("X".equals(label.getText())) {
                // lblarr'in sınırlarını kontrol et
                linkmanual.addlbl(label);

            }
        }

    }

    public void showXmancard() {

        NodeClass current = linkmanual.head;

        while (current != null) {
            for (int i = 1; i <= 27; i++) {
                JLabel label = findLabelByIndex(i);
                if (current.labe == label) {
                    label.setText("X");
                }
            }
            current = current.next;
        }
    }

    private void checkbng() {
        NodeClass current = linkmanual.head;
        // 9x3 kart oluşturma
        int cinko = 0;
        int sumtomb = 0;
        for (int row = 0; row < 3; row++) {
            int tombala = 0;
            for (int col = 0; col < 5; col++) {
                if (current.data == -2) {
                    tombala++;
                    sumtomb++;
                    current = current.next;
                } else {
                    current = current.next;
                }

            }
            if (tombala > 4) {
                cinko++;
            }

        }

        jLabel3.setText(String.valueOf(cinko));
        jLabel5.setText(String.valueOf(sumtomb));
        boolean found = false;
        int index = 0;
        while (index < sumbng.size()) {
            String element = String.valueOf(sumbng.getElementAt(index));
            if (element.startsWith("Player" + 3)) {
                found = true;
                break;
            }
            index++;
        }

        // Eğer varsa değeri güncelle, yoksa yeni bir öğe ekle
        if (found) {
            sumbng.set(index, "Player" + 3 + ", Bingo Count =" + cinko);
        } 
    }

}
